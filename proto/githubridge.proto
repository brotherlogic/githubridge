syntax = "proto3";

package githubridge;

option go_package = "github.com/brotherlogic/githubridge/proto";

message GithubIssue {
    int64 id = 1;
    string user = 2;
    string repo = 3;
    string title = 4;
    int64 opened_date = 5;
    IssueState state = 6;
    repeated string labels = 7;
}

enum IssueState {
    ISSUE_STATE_UNKNOWN = 0;
    ISSUE_STATE_OPEN = 1;
    ISSUE_STATE_CLOSED = 2;
}

message CreateIssueRequest {
    string user = 1;
    string repo = 2;
    string title = 3;
    string body = 4;
}

message CreateIssueResponse {
    int64 issue_id = 1;

    // Indicates we're trying to create an issue that already exists, and 
    // that this is what has been returned
    bool already_existing_issue = 2;
}

message GetIssueRequest {
    string user = 1;
    string repo = 2;
    int32 id = 3;
}

message GetIssuesRequest {}
message GetIssuesResponse {
    repeated GithubIssue issues = 1;
}

message GetIssueResponse {
    string state = 1;
    int32 comments = 2;
    repeated string labels = 3;
}

message CloseIssueRequest {
    string user = 1;
    string repo = 2;
    int64 id = 3;
}

message CloseIssueResponse {}

message CommentOnIssueRequest {
    string user = 1;
    string repo = 2;
    int32 id = 3;
    string comment = 4;
}

message CommentOnIssueResponse{}

message GetCommentsRequest{
    string user = 1;
    string repo = 2;
    int32 id = 3;
}

message Comment {
    int32 number = 1;
    string text = 2;
    int64 timestamp = 3;
}

message GetCommentsResponse{
    repeated Comment comments = 1;
}

message GetLabelsRequest {
    string user = 1;
    string repo = 2;
    int32 id = 3;
}

message GetLabelsResponse {
    repeated string labels = 1;
}

message AddLabelRequest {
    string user = 1;
    string repo = 2;
    int32 id = 3;
    string label = 4;
}

message AddLabelResponse {}

message DeleteLabelRequest {
    string user = 1;
    string repo = 2;
    int32 id = 3;
    string label = 4;
}

message DeleteLabelResponse {}


message Version {
    string version = 1;
    int64 date = 2;
}
message GetReleasesRequest {
    string user = 1;
    string repo = 2;
}
message GetReleasesResponse {
    repeated Version versions = 1;
}

message GetReposRequest {
    string user = 1;
}

message GetReposResponse {
    repeated string repos = 1;
}

message GetProjectsRequest {
    string user = 1;
}

message GetProjectsResponse {
    repeated string projects = 1;
}

message ListFilesRequest {
    string user = 1;
    string repo = 2;

    string path = 3;
}

message File {
    string name = 1;
    string hash = 2;
}

message ListFilesResponse {
    repeated File files = 1;
}

message GetRepoRequest {
    string user = 1;
    string repo = 2;

    string branch = 3;
}

message GetRepoResponse {
    string sha1 = 1;
}

service GithubridgeService {
    rpc AddLabel(AddLabelRequest) returns (AddLabelResponse);
    rpc DeleteLabel(DeleteLabelRequest) returns (DeleteLabelResponse);
    rpc CreateIssue(CreateIssueRequest) returns (CreateIssueResponse);
    rpc GetIssue(GetIssueRequest) returns (GetIssueResponse);
    rpc GetIssues(GetIssuesRequest) returns (GetIssuesResponse);
    rpc CloseIssue(CloseIssueRequest) returns (CloseIssueResponse);
    rpc CommentOnIssue(CommentOnIssueRequest) returns (CommentOnIssueResponse);
    rpc GetComments(GetCommentsRequest) returns (GetCommentsResponse);
    rpc GetLabels(GetLabelsRequest) returns (GetLabelsResponse);
    rpc GetReleases(GetReleasesRequest) returns (GetReleasesResponse);
    rpc GetRepos(GetReposRequest) returns (GetReposResponse);
    rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse);
    rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);
    rpc GetRepo(GetRepoRequest) returns (GetRepoResponse);
}
