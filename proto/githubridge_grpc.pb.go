// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: githubridge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GithubridgeClient is the client API for Githubridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubridgeClient interface {
	CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*CreateIssueResponse, error)
}

type githubridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubridgeClient(cc grpc.ClientConnInterface) GithubridgeClient {
	return &githubridgeClient{cc}
}

func (c *githubridgeClient) CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*CreateIssueResponse, error) {
	out := new(CreateIssueResponse)
	err := c.cc.Invoke(ctx, "/githubridge.Githubridge/CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubridgeServer is the server API for Githubridge service.
// All implementations should embed UnimplementedGithubridgeServer
// for forward compatibility
type GithubridgeServer interface {
	CreateIssue(context.Context, *CreateIssueRequest) (*CreateIssueResponse, error)
}

// UnimplementedGithubridgeServer should be embedded to have forward compatible implementations.
type UnimplementedGithubridgeServer struct {
}

func (UnimplementedGithubridgeServer) CreateIssue(context.Context, *CreateIssueRequest) (*CreateIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}

// UnsafeGithubridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubridgeServer will
// result in compilation errors.
type UnsafeGithubridgeServer interface {
	mustEmbedUnimplementedGithubridgeServer()
}

func RegisterGithubridgeServer(s grpc.ServiceRegistrar, srv GithubridgeServer) {
	s.RegisterService(&Githubridge_ServiceDesc, srv)
}

func _Githubridge_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubridgeServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubridge.Githubridge/CreateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubridgeServer).CreateIssue(ctx, req.(*CreateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Githubridge_ServiceDesc is the grpc.ServiceDesc for Githubridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Githubridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "githubridge.Githubridge",
	HandlerType: (*GithubridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIssue",
			Handler:    _Githubridge_CreateIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "githubridge.proto",
}
