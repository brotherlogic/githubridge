// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: githubridge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GithubBridgeClient is the client API for GithubBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubBridgeClient interface {
	AddIssue(ctx context.Context, in *AddIssueRequest, opts ...grpc.CallOption) (*AddIssueResponse, error)
}

type githubBridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubBridgeClient(cc grpc.ClientConnInterface) GithubBridgeClient {
	return &githubBridgeClient{cc}
}

func (c *githubBridgeClient) AddIssue(ctx context.Context, in *AddIssueRequest, opts ...grpc.CallOption) (*AddIssueResponse, error) {
	out := new(AddIssueResponse)
	err := c.cc.Invoke(ctx, "/githubridge.GithubBridge/AddIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubBridgeServer is the server API for GithubBridge service.
// All implementations should embed UnimplementedGithubBridgeServer
// for forward compatibility
type GithubBridgeServer interface {
	AddIssue(context.Context, *AddIssueRequest) (*AddIssueResponse, error)
}

// UnimplementedGithubBridgeServer should be embedded to have forward compatible implementations.
type UnimplementedGithubBridgeServer struct {
}

func (UnimplementedGithubBridgeServer) AddIssue(context.Context, *AddIssueRequest) (*AddIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIssue not implemented")
}

// UnsafeGithubBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubBridgeServer will
// result in compilation errors.
type UnsafeGithubBridgeServer interface {
	mustEmbedUnimplementedGithubBridgeServer()
}

func RegisterGithubBridgeServer(s grpc.ServiceRegistrar, srv GithubBridgeServer) {
	s.RegisterService(&GithubBridge_ServiceDesc, srv)
}

func _GithubBridge_AddIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubBridgeServer).AddIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubridge.GithubBridge/AddIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubBridgeServer).AddIssue(ctx, req.(*AddIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GithubBridge_ServiceDesc is the grpc.ServiceDesc for GithubBridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GithubBridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "githubridge.GithubBridge",
	HandlerType: (*GithubBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIssue",
			Handler:    _GithubBridge_AddIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "githubridge.proto",
}
